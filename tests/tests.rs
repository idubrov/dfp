//! AUTOGENERATED. DO NOT EDIT
#![allow(non_snake_case)]
#![allow(clippy::unreadable_literal)]

pub mod util;
use dfp::{d32, d64, d128, FpCategory, Rounding};
use self::util::Bits;

#[test]
#[rustfmt::skip]
fn bid128_abs() {
    assert_eq!(Bits(d128::from_bits(0x0001ed09bead87c0378d8e62ffffffff).abs().to_bits()), Bits(d128::from_bits(0x0001ed09bead87c0378d8e62ffffffff).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x0001ed09bead87c0378d8e64ffffffff).abs().to_bits()), Bits(d128::from_bits(0x0001ed09bead87c0378d8e64ffffffff).to_bits()));
    assert_eq!(Bits("-0".parse::<d128>().unwrap().abs().to_bits()), Bits(d128::from_bits(0x30400000000000000000000000000000).to_bits()));
    assert_eq!(Bits("0".parse::<d128>().unwrap().abs().to_bits()), Bits(d128::from_bits(0x30400000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x20491165061c532a535089a5c8f9da39).abs().to_bits()), Bits(d128::from_bits(0x20491165061c532a535089a5c8f9da39).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x21213a1853ae801da7a83cd1c3bfc8cb).abs().to_bits()), Bits(d128::from_bits(0x21213a1853ae801da7a83cd1c3bfc8cb).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x3577621b973eb09d7e1681d2fc2fd1a3).abs().to_bits()), Bits(d128::from_bits(0x3577621b973eb09d7e1681d2fc2fd1a3).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x3d780000000000000000000000000000).abs().to_bits()), Bits(d128::from_bits(0x3d780000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x3f620000000000000000000000000000).abs().to_bits()), Bits(d128::from_bits(0x3f620000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x54f99570af8fbdf89052e356786395d7).abs().to_bits()), Bits(d128::from_bits(0x54f99570af8fbdf89052e356786395d7).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x59170c2b2d753371caddbeb2aa9e9d19).abs().to_bits()), Bits(d128::from_bits(0x59170c2b2d753371caddbeb2aa9e9d19).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x78000000000000000000000000000000).abs().to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x7c003fffffffffff38c15b08ffffffff).abs().to_bits()), Bits(d128::from_bits(0x7c003fffffffffff38c15b08ffffffff).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x7c003fffffffffff38c15b0affffffff).abs().to_bits()), Bits(d128::from_bits(0x7c003fffffffffff38c15b0affffffff).to_bits()));
    assert_eq!(Bits(d128::from_bits(0x812c0000000000000000000000000000).abs().to_bits()), Bits(d128::from_bits(0x012c0000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::from_bits(0xa050785cc4df58144acbb40b269da9e3).abs().to_bits()), Bits(d128::from_bits(0x2050785cc4df58144acbb40b269da9e3).to_bits()));
    assert_eq!(Bits(d128::from_bits(0xbc920000000000000000000000000000).abs().to_bits()), Bits(d128::from_bits(0x3c920000000000000000000000000000).to_bits()));
    assert_eq!(Bits("-inf".parse::<d128>().unwrap().abs().to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits("inf".parse::<d128>().unwrap().abs().to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits("qNaN".parse::<d128>().unwrap().abs().to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits("sNaN".parse::<d128>().unwrap().abs().to_bits()), Bits(d128::from_bits(0x7e000000000000000000000000000000).to_bits()));
}

#[test]
#[rustfmt::skip]
fn bid128_class() {
    assert_eq!(d128::from_bits(0x0001ed09bead87c0378d8e62ffffffff).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x0001ed09bead87c0378d8e62ffffffff).is_sign_positive());
    assert_eq!(d128::from_bits(0x0001ed09bead87c0378d8e64ffffffff).classify(), FpCategory::Zero);
    assert!(d128::from_bits(0x0001ed09bead87c0378d8e64ffffffff).is_sign_positive());
    assert_eq!(d128::from_bits(0x0029314dc6448d9338c15b09ffffffff).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x0029314dc6448d9338c15b09ffffffff).is_sign_positive());
    assert_eq!(d128::from_bits(0x0029314dc6448d9338c15b0a00000000).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x0029314dc6448d9338c15b0a00000000).is_sign_positive());
    assert_eq!(d128::from_bits(0x002a0000000000000000000000000000).classify(), FpCategory::Zero);
    assert!(d128::from_bits(0x002a0000000000000000000000000000).is_sign_positive());
    assert_eq!(d128::from_bits(0x002a000000000000000009184E729FFF).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x002a000000000000000009184E729FFF).is_sign_positive());
    assert_eq!(d128::from_bits(0x002a000000000000000009184E72A000).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x002a000000000000000009184E72A000).is_sign_positive());
    assert_eq!("-0e-15".parse::<d128>().unwrap().classify(), FpCategory::Zero);
    assert!("-0e-15".parse::<d128>().unwrap().is_sign_negative());
    assert_eq!("0e-15".parse::<d128>().unwrap().classify(), FpCategory::Zero);
    assert!("0e-15".parse::<d128>().unwrap().is_sign_positive());
    assert_eq!("-0e+368".parse::<d128>().unwrap().classify(), FpCategory::Zero);
    assert!("-0e+368".parse::<d128>().unwrap().is_sign_negative());
    assert_eq!("0e+368".parse::<d128>().unwrap().classify(), FpCategory::Zero);
    assert!("0e+368".parse::<d128>().unwrap().is_sign_positive());
    assert_eq!("0e+6110".parse::<d128>().unwrap().classify(), FpCategory::Zero);
    assert!("0e+6110".parse::<d128>().unwrap().is_sign_positive());
    assert_eq!("-0e+6111".parse::<d128>().unwrap().classify(), FpCategory::Zero);
    assert!("-0e+6111".parse::<d128>().unwrap().is_sign_negative());
    assert_eq!("-1.2345678901234568e-6160".parse::<d128>().unwrap().classify(), FpCategory::Subnormal);
    assert!("-1.2345678901234568e-6160".parse::<d128>().unwrap().is_sign_negative());
    assert_eq!("1.2345678901234568e-6160".parse::<d128>().unwrap().classify(), FpCategory::Subnormal);
    assert!("1.2345678901234568e-6160".parse::<d128>().unwrap().is_sign_positive());
    assert_eq!("-1.234567890123456e+383".parse::<d128>().unwrap().classify(), FpCategory::Normal);
    assert!("-1.234567890123456e+383".parse::<d128>().unwrap().is_sign_negative());
    assert_eq!("1.234567890123456e+383".parse::<d128>().unwrap().classify(), FpCategory::Normal);
    assert!("1.234567890123456e+383".parse::<d128>().unwrap().is_sign_positive());
    assert_eq!("1e+367".parse::<d128>().unwrap().classify(), FpCategory::Normal);
    assert!("1e+367".parse::<d128>().unwrap().is_sign_positive());
    assert_eq!("-1e+368".parse::<d128>().unwrap().classify(), FpCategory::Normal);
    assert!("-1e+368".parse::<d128>().unwrap().is_sign_negative());
    assert_eq!("-1e+6109".parse::<d128>().unwrap().classify(), FpCategory::Normal);
    assert!("-1e+6109".parse::<d128>().unwrap().is_sign_negative());
    assert_eq!("1e+6109".parse::<d128>().unwrap().classify(), FpCategory::Normal);
    assert!("1e+6109".parse::<d128>().unwrap().is_sign_positive());
    assert_eq!("-1e-6176".parse::<d128>().unwrap().classify(), FpCategory::Subnormal);
    assert!("-1e-6176".parse::<d128>().unwrap().is_sign_negative());
    assert_eq!("1e-6176".parse::<d128>().unwrap().classify(), FpCategory::Subnormal);
    assert!("1e-6176".parse::<d128>().unwrap().is_sign_positive());
    assert_eq!(d128::from_bits(0x60000000000000000000000000000000).classify(), FpCategory::Zero);
    assert!(d128::from_bits(0x60000000000000000000000000000000).is_sign_positive());
    assert_eq!(d128::from_bits(0x6003b75d7734cd9e1234567890123456).classify(), FpCategory::Zero);
    assert!(d128::from_bits(0x6003b75d7734cd9e1234567890123456).is_sign_positive());
    assert_eq!(d128::from_bits(0x69dbb75d7734cd9e1234567890123456).classify(), FpCategory::Zero);
    assert!(d128::from_bits(0x69dbb75d7734cd9e1234567890123456).is_sign_positive());
    assert_eq!(d128::from_bits(0x78000000000000000000000000000000).classify(), FpCategory::Infinite);
    assert!(d128::from_bits(0x78000000000000000000000000000000).is_sign_positive());
    assert_eq!(d128::from_bits(0x78000000000000000000000000000001).classify(), FpCategory::Infinite);
    assert!(d128::from_bits(0x78000000000000000000000000000001).is_sign_positive());
    assert_eq!(d128::from_bits(0x7c000000000000000000000000000000).classify(), FpCategory::Nan);
    assert!(!d128::from_bits(0x7c000000000000000000000000000000).is_snan());
    assert_eq!(d128::from_bits(0x7c000000000000000000000000000001).classify(), FpCategory::Nan);
    assert!(!d128::from_bits(0x7c000000000000000000000000000001).is_snan());
    assert_eq!(d128::from_bits(0x7c003fffffffffff38c15b08ffffffff).classify(), FpCategory::Nan);
    assert!(!d128::from_bits(0x7c003fffffffffff38c15b08ffffffff).is_snan());
    assert_eq!(d128::from_bits(0x7c003fffffffffff38c15b0affffffff).classify(), FpCategory::Nan);
    assert!(!d128::from_bits(0x7c003fffffffffff38c15b0affffffff).is_snan());
    assert_eq!(d128::from_bits(0x7e000000000000000000000000000000).classify(), FpCategory::Nan);
    assert!(d128::from_bits(0x7e000000000000000000000000000000).is_snan());
    assert_eq!(d128::from_bits(0x7e000000000000000000000000000001).classify(), FpCategory::Nan);
    assert!(d128::from_bits(0x7e000000000000000000000000000001).is_snan());
    assert_eq!(d128::from_bits(0xe0000000000000000000000000000001).classify(), FpCategory::Zero);
    assert!(d128::from_bits(0xe0000000000000000000000000000001).is_sign_negative());
    assert_eq!(d128::from_bits(0xe003b75d7734cd9e1234567890123456).classify(), FpCategory::Zero);
    assert!(d128::from_bits(0xe003b75d7734cd9e1234567890123456).is_sign_negative());
    assert_eq!(d128::from_bits(0xe9dbb75d7734cd9e1234567890123456).classify(), FpCategory::Zero);
    assert!(d128::from_bits(0xe9dbb75d7734cd9e1234567890123456).is_sign_negative());
    assert_eq!(d128::from_bits(0xf8000000000000000000000000000000).classify(), FpCategory::Infinite);
    assert!(d128::from_bits(0xf8000000000000000000000000000000).is_sign_negative());
    assert_eq!(d128::from_bits(0xfc000000000000000000000000000000).classify(), FpCategory::Nan);
    assert!(!d128::from_bits(0xfc000000000000000000000000000000).is_snan());
    assert_eq!(d128::from_bits(0xfc000000000000000000000000000001).classify(), FpCategory::Nan);
    assert!(!d128::from_bits(0xfc000000000000000000000000000001).is_snan());
    assert_eq!(d128::from_bits(0xfe000000000000000000000000000000).classify(), FpCategory::Nan);
    assert!(d128::from_bits(0xfe000000000000000000000000000000).is_snan());
    assert_eq!(d128::from_bits(0xfe000000000000000000000000000001).classify(), FpCategory::Nan);
    assert!(d128::from_bits(0xfe000000000000000000000000000001).is_snan());
    assert_eq!("-inf".parse::<d128>().unwrap().classify(), FpCategory::Infinite);
    assert!("-inf".parse::<d128>().unwrap().is_sign_negative());
    assert_eq!("inf".parse::<d128>().unwrap().classify(), FpCategory::Infinite);
    assert!("inf".parse::<d128>().unwrap().is_sign_positive());
    assert_eq!(d128::from_bits(0x00400000000000000000000000000001).classify(), FpCategory::Subnormal);
    assert!(d128::from_bits(0x00400000000000000000000000000001).is_sign_positive());
    assert_eq!(d128::from_bits(0x0000314DC6448D93FFFFFFFFFFFFFFFF).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x0000314DC6448D93FFFFFFFFFFFFFFFF).is_sign_positive());
    assert_eq!(d128::from_bits(0x0000314DC6448D93ffffffff00000000).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x0000314DC6448D93ffffffff00000000).is_sign_positive());
    assert_eq!(d128::from_bits(0x002A000000000000FFFFFFFFFFFFFFFF).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x002A000000000000FFFFFFFFFFFFFFFF).is_sign_positive());
    assert_eq!(d128::from_bits(0x0028000000000000FFFFFFFFFFFFFFFF).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x0028000000000000FFFFFFFFFFFFFFFF).is_sign_positive());
    assert_eq!(d128::from_bits(0x002A000000000000000000E8D4A51000).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x002A000000000000000000E8D4A51000).is_sign_positive());
    assert_eq!(d128::from_bits(0x002A000000000000000000E8D4A51001).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x002A000000000000000000E8D4A51001).is_sign_positive());
    assert_eq!(d128::from_bits(0x002A000000000000000000E8D4A50FFF).classify(), FpCategory::Subnormal);
    assert!(d128::from_bits(0x002A000000000000000000E8D4A50FFF).is_sign_positive());
    assert_eq!(d128::from_bits(0x0000314DC6448D9338C15B0A00000001).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x0000314DC6448D9338C15B0A00000001).is_sign_positive());
    assert_eq!(d128::from_bits(0x0000314DC6448D9338C15B0A00000000).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x0000314DC6448D9338C15B0A00000000).is_sign_positive());
    assert_eq!(d128::from_bits(0x0000314DC6448D9338C15B09FFFFFFFF).classify(), FpCategory::Subnormal);
    assert!(d128::from_bits(0x0000314DC6448D9338C15B09FFFFFFFF).is_sign_positive());
    assert_eq!(d128::from_bits(0x802A000000000000000000E8D4A51000).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x802A000000000000000000E8D4A51000).is_sign_negative());
    assert_eq!(d128::from_bits(0x802A000000000000000000E8D4A51001).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x802A000000000000000000E8D4A51001).is_sign_negative());
    assert_eq!(d128::from_bits(0x802A000000000000000000E8D4A50FFF).classify(), FpCategory::Subnormal);
    assert!(d128::from_bits(0x802A000000000000000000E8D4A50FFF).is_sign_negative());
    assert_eq!(d128::from_bits(0x8000314DC6448D9338C15B0A00000001).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x8000314DC6448D9338C15B0A00000001).is_sign_negative());
    assert_eq!(d128::from_bits(0x8000314DC6448D9338C15B0A00000000).classify(), FpCategory::Normal);
    assert!(d128::from_bits(0x8000314DC6448D9338C15B0A00000000).is_sign_negative());
    assert_eq!(d128::from_bits(0x8000314DC6448D9338C15B09FFFFFFFF).classify(), FpCategory::Subnormal);
    assert!(d128::from_bits(0x8000314DC6448D9338C15B09FFFFFFFF).is_sign_negative());
}

#[test]
#[rustfmt::skip]
fn bid128_from_string() {
    assert_eq!(Bits(d128::parse_rounding("0e6176", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits("0e6111".parse::<d128>().unwrap().to_bits()));
    assert_eq!(Bits(d128::parse_rounding("12345678901234567890123456789012345", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits("1234567890123456789012345678901234e1".parse::<d128>().unwrap().to_bits()));
    assert_eq!(Bits(d128::parse_rounding("12345678901234567890123456789012345", Rounding::Down).unwrap_or(d128::NAN).to_bits()), Bits("1234567890123456789012345678901234e1".parse::<d128>().unwrap().to_bits()));
    assert_eq!(Bits(d128::parse_rounding("12345678901234567890123456789012345", Rounding::Up).unwrap_or(d128::NAN).to_bits()), Bits("1234567890123456789012345678901235e1".parse::<d128>().unwrap().to_bits()));
    assert_eq!(Bits(d128::parse_rounding("12345678901234567890123456789012345", Rounding::Zero).unwrap_or(d128::NAN).to_bits()), Bits("1234567890123456789012345678901234e1".parse::<d128>().unwrap().to_bits()));
    assert_eq!(Bits(d128::parse_rounding("12345678901234567890123456789012345", Rounding::TiesAway).unwrap_or(d128::NAN).to_bits()), Bits("1234567890123456789012345678901235e1".parse::<d128>().unwrap().to_bits()));
    assert_eq!(Bits(d128::parse_rounding("-9.9999999999999999999999999999999995", Rounding::Up).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0xafffed09bead87c0378d8e63ffffffff).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("-9.9999999999999999999999999999999995", Rounding::Down).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0xb000314dc6448d9338c15b0a00000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("9.9999999999999999999999999999999995", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x3000314dc6448d9338c15b0a00000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("9.9999999999999999999999999999999995", Rounding::Up).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x3000314dc6448d9338c15b0a00000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("9.9999999999999999999999999999999995", Rounding::TiesAway).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x3000314dc6448d9338c15b0a00000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("9.9999999999999999999999999999999995", Rounding::Zero).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2fffed09bead87c0378d8e63ffffffff).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("9.9999999999999999999999999999999995", Rounding::Down).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2fffed09bead87c0378d8e63ffffffff).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.0000000000000000000000000000000015", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000002).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.0000000000000000000000000000000015", Rounding::Up).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000002).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.0000000000000000000000000000000015", Rounding::TiesAway).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000002).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.0000000000000000000000000000000015", Rounding::Zero).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000001).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.0000000000000000000000000000000015", Rounding::Down).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000001).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("000.0", Rounding::Down).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x303e0000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("0.0000000000000000000000000000000000000000000000000000000000000001001", Rounding::Down).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2fba00000000000000000000000003e9).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("0.0000000000000000000000000000000000000000000000000000000000000001001", Rounding::Down).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2fba00000000000000000000000003e9).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("0.", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x30400000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x30400000000000000000000000000001).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1..", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.0000000000000000000000000000000005", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.0000000000000000000000000000000005", Rounding::Up).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000001).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.0000000000000000000000000000000005", Rounding::TiesAway).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000001).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.0000000000000000000000000000000005", Rounding::Zero).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.0000000000000000000000000000000005", Rounding::Down).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.00000000000000000000000000000000051", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000001).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.00000000000000000000000000000000051", Rounding::Up).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000001).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.00000000000000000000000000000000051", Rounding::TiesAway).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000001).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.00000000000000000000000000000000051", Rounding::Zero).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.00000000000000000000000000000000051", Rounding::Down).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe314dc6448d9338c15b0a00000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.9999999999999999999999999990000004999999999999999", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe629b8c891b267182b613fff0bdc0).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.9999999999999999999999999990000004999999999999999", Rounding::Up).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe629b8c891b267182b613fff0bdc1).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.9999999999999999999999999990000004999999999999999", Rounding::Down).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe629b8c891b267182b613fff0bdc0).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.9999999999999999999999999990000004999999999999999", Rounding::TiesAway).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe629b8c891b267182b613fff0bdc0).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.9999999999999999999999999990000004999999999999999", Rounding::Zero).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x2ffe629b8c891b267182b613fff0bdc0).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.1e2", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x3042000000000000000000000000000b).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.1p2", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.1ee", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.1p-2", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("1.1e-2e", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+infi", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+NaN", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7e000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7e000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+NaN", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7e000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("+infi", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("inf", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("infi", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("NaN", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("sNaN", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7e000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("sNaN", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7e000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("inf", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("NaN", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("sNaN", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7e000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("inf", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("inf", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("inf", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x78000000000000000000000000000000).to_bits()));
    assert_eq!(Bits(d128::parse_rounding("infi", Rounding::Nearest).unwrap_or(d128::NAN).to_bits()), Bits(d128::from_bits(0x7c000000000000000000000000000000).to_bits()));
}

#[test]
#[rustfmt::skip]
fn bid128_isFinite() {
    assert!(d128::from_bits(0x0001ed09bead87c0378d8e62ffffffff).is_finite());
    assert!(d128::from_bits(0x0001ed09bead87c0378d8e64ffffffff).is_finite());
    assert!("-0".parse::<d128>().unwrap().is_finite());
    assert!("0".parse::<d128>().unwrap().is_finite());
    assert!(d128::from_bits(0x069ebbde47cecaf646be7beaba7b59b2).is_finite());
    assert!(d128::from_bits(0x0e3676b062a501d10b09be374b9584af).is_finite());
    assert!(d128::from_bits(0x0e89a019d51dfb526d3d4f5cec95045e).is_finite());
    assert!(d128::from_bits(0x2fc2e6f5db986999e05bf17d978fe530).is_finite());
    assert!(d128::from_bits(0x38f8c0be302ea60357e8f20e5933296f).is_finite());
    assert!("+5296735256349.e0".parse::<d128>().unwrap().is_finite());
    assert!(d128::from_bits(0x587840394b1e40281e9750988e309c82).is_finite());
    assert!(!d128::from_bits(0x7c0013fea80d776e4da30049fb4205a6).is_finite());
    assert!(!d128::from_bits(0x7c003fffffffffff38c15b08ffffffff).is_finite());
    assert!(!d128::from_bits(0x7c003fffffffffff38c15b0affffffff).is_finite());
    assert!(d128::from_bits(0xa34647a87b5d409d0b81a865d0b81418).is_finite());
    assert!(d128::from_bits(0xb1a03c62cd15d1e3984fecd726ec37f2).is_finite());
    assert!(d128::from_bits(0xb1cc5b6aee8fe1c3d7ba66922fd8e8d7).is_finite());
    assert!(d128::from_bits(0xb5960000000000000000000000000000).is_finite());
    assert!(!"-inf".parse::<d128>().unwrap().is_finite());
    assert!(!"inf".parse::<d128>().unwrap().is_finite());
    assert!(!"qNaN".parse::<d128>().unwrap().is_finite());
    assert!(!"sNaN".parse::<d128>().unwrap().is_finite());
}

#[test]
#[rustfmt::skip]
fn bid128_isInf() {
    assert!(!"-0".parse::<d128>().unwrap().is_infinite());
    assert!(!"0".parse::<d128>().unwrap().is_infinite());
    assert!(!d128::from_bits(0x0001ed09bead87c0378d8e62ffffffff).is_infinite());
    assert!(!d128::from_bits(0x0001ed09bead87c0378d8e64ffffffff).is_infinite());
    assert!(!d128::from_bits(0x0a57e401d7f2f4bf1a0275159b396b2a).is_infinite());
    assert!(!d128::from_bits(0x3737d5460658b65502508fbbc30ff543).is_infinite());
    assert!(!d128::from_bits(0x5902fa4ce87119640b0601200002a041).is_infinite());
    assert!(!d128::from_bits(0x7c003fffffffffff38c15b08ffffffff).is_infinite());
    assert!(!d128::from_bits(0x7c003fffffffffff38c15b0affffffff).is_infinite());
    assert!(!d128::from_bits(0x8cd4ffbce0ecd8e27cba342f141e4231).is_infinite());
    assert!(!d128::from_bits(0x8dd84ed7938863291f6560ffe1332f11).is_infinite());
    assert!(!d128::from_bits(0x935d9c0d11b20b309b8116fd41f5394f).is_infinite());
    assert!(!d128::from_bits(0x94bc0000000000000000000000000000).is_infinite());
    assert!(!d128::from_bits(0x9b6e0000000000000000000000000000).is_infinite());
    assert!(!d128::from_bits(0xa9a7b8e122afeaccd57a83774becaedb).is_infinite());
    assert!(!d128::from_bits(0xb05fafc0064a7b3137c23276a8be7ed3).is_infinite());
    assert!(!d128::from_bits(0xbe42bd49b8cd1d759da62cb45a360a56).is_infinite());
    assert!("inf".parse::<d128>().unwrap().is_infinite());
    assert!(!"qNaN".parse::<d128>().unwrap().is_infinite());
    assert!(!"sNaN".parse::<d128>().unwrap().is_infinite());
    assert!(d128::from_bits(0x78000000000000000000000000000000).is_infinite());
    assert!(d128::from_bits(0xf8000000000000000000000000000000).is_infinite());
}

#[test]
#[rustfmt::skip]
fn bid128_isNaN() {
    assert!(!"-0".parse::<d128>().unwrap().is_nan());
    assert!(!d128::from_bits(0x0001ed09bead87c0378d8e62ffffffff).is_nan());
    assert!(!d128::from_bits(0x0001ed09bead87c0378d8e64ffffffff).is_nan());
    assert!(!d128::from_bits(0x21e40000000000000000000000000000).is_nan());
    assert!(!d128::from_bits(0x2a21676f21ef040108e2139097e4f45c).is_nan());
    assert!(!d128::from_bits(0x41940000000000000000000000000000).is_nan());
    assert!(!d128::from_bits(0x78000000000000000000000000000000).is_nan());
    assert!(d128::from_bits(0x7c003fffffffffff38c15b08ffffffff).is_nan());
    assert!(d128::from_bits(0x7c003fffffffffff38c15b0affffffff).is_nan());
    assert!(!d128::from_bits(0x80ed2b9d1a45002732c4bfcbb8b15c1b).is_nan());
    assert!(!d128::from_bits(0x95165ea3a5f0caf66ba829819d59b6e2).is_nan());
    assert!(!d128::from_bits(0xb0a9c89c8400622c4764c72807e8a958).is_nan());
    assert!(!d128::from_bits(0xcacbd04a2ef781fd33f2c1bcab363a74).is_nan());
    assert!(!d128::from_bits(0xda34655b3c4627e7f91a483887abf433).is_nan());
    assert!(!"-inf".parse::<d128>().unwrap().is_nan());
    assert!(!"inf".parse::<d128>().unwrap().is_nan());
    assert!("qNaN".parse::<d128>().unwrap().is_nan());
}

#[test]
#[rustfmt::skip]
fn bid128_isNormal() {
    assert!(!"-0".parse::<d128>().unwrap().is_normal());
    assert!(!"0".parse::<d128>().unwrap().is_normal());
    assert!(!d128::from_bits(0x00000000000000000000000000000000).is_normal());
    assert!(!d128::from_bits(0x0000000000000000ff7eff7efde9eb6f).is_normal());
    assert!(d128::from_bits(0x0001ed09bead87c0378d8e62ffffffff).is_normal());
    assert!(!d128::from_bits(0x0001ed09bead87c0378d8e64ffffffff).is_normal());
    assert!(d128::from_bits(0x00400000000000000010040010214040).is_normal());
    assert!(!d128::from_bits(0x03f40000000000000000000000000000).is_normal());
    assert!(!d128::from_bits(0x09780000000000000000000000000000).is_normal());
    assert!(!d128::from_bits(0x1a6a0000000000000000000000000000).is_normal());
    assert!(!d128::from_bits(0x25d9f797bbcaf773fffffddf7efcfff2).is_normal());
    assert!(d128::from_bits(0x35ace066c705811c32d5b5ac007a79e4).is_normal());
    assert!(!d128::from_bits(0x42ec0000000000000000000000000000).is_normal());
    assert!(d128::from_bits(0x49580caebdff5a9616f246996cb5d380).is_normal());
    assert!(d128::from_bits(0x4f2e07ed4464f530f2b733c46e098dfa).is_normal());
    assert!(!d128::from_bits(0x7c003fffffffffff38c15b08ffffffff).is_normal());
    assert!(!d128::from_bits(0x7c003fffffffffff38c15b0affffffff).is_normal());
    assert!(d128::from_bits(0x818260b7152cc2d1e918ef83f6aaf170).is_normal());
    assert!(d128::from_bits(0x83c9ce9c161201425481842016081200).is_normal());
    assert!(d128::from_bits(0x9d083f98b8a9588416a840ca162eead0).is_normal());
    assert!(d128::from_bits(0x9f777faa7f240d67872dedfcdfe2fa8e).is_normal());
    assert!(d128::from_bits(0xa9634862e4a483809e678b2e978fb31c).is_normal());
    assert!(!d128::from_bits(0xfffdffffffbffff7fffbf7fcf7f5edf7).is_normal());
    assert!(!"-inf".parse::<d128>().unwrap().is_normal());
    assert!(!"inf".parse::<d128>().unwrap().is_normal());
    assert!(!"qNaN".parse::<d128>().unwrap().is_normal());
    assert!(!"sNaN".parse::<d128>().unwrap().is_normal());
}

#[test]
#[rustfmt::skip]
fn bid128_isSigned() {
    assert!(!"0".parse::<d128>().unwrap().is_sign_negative());
    assert!(!d128::from_bits(0x0d1b4a11dd2b2c2d4d69c430aae5a351).is_sign_negative());
    assert!(!d128::from_bits(0x1010080201c404080200000808020000).is_sign_negative());
    assert!(!d128::from_bits(0x1da7727000019412043034285964b3e5).is_sign_negative());
    assert!(!d128::from_bits(0x291faf7540e31c98a37ad09f66370b5c).is_sign_negative());
    assert!(!d128::from_bits(0x32ed04cf2a6dd7973b5689f82fd08e7b).is_sign_negative());
    assert!(!d128::from_bits(0x4f33bb3daf404b482895c9fcdd30262f).is_sign_negative());
    assert!(!d128::from_bits(0x5bd983e54f226f4e447f2d30f6d2853d).is_sign_negative());
    assert!(!d128::from_bits(0x5d037a9f76ec79f3169e495eb8705c03).is_sign_negative());
    assert!(!d128::from_bits(0x78000000000000000000000000000000).is_sign_negative());
    assert!(d128::from_bits(0xd4aa0000000000000000000000000000).is_sign_negative());
    assert!(d128::from_bits(0xdabc266156593af84fd97dc923bc7064).is_sign_negative());
    assert!(!"inf".parse::<d128>().unwrap().is_sign_negative());
    assert!("-inf".parse::<d128>().unwrap().is_sign_negative());
    assert!(!"qNaN".parse::<d128>().unwrap().is_sign_negative());
}

#[test]
#[rustfmt::skip]
fn bid128_isSubnormal() {
    assert!(!"-0".parse::<d128>().unwrap().is_subnormal());
    assert!(!d128::from_bits(0x0001ed09bead87c0378d8e62ffffffff).is_subnormal());
    assert!(!d128::from_bits(0x0001ed09bead87c0378d8e64ffffffff).is_subnormal());
    assert!(d128::from_bits(0x000200000000000007a63158fbd6b32f).is_subnormal());
    assert!(d128::from_bits(0x00080000000000000002000000000000).is_subnormal());
    assert!(!d128::from_bits(0x001020104460001d09012838901080cd).is_subnormal());
    assert!(!d128::from_bits(0x08200000000000000000000000000000).is_subnormal());
    assert!(!d128::from_bits(0x1b0b59df37c84a5a5ca7168a8feedcb1).is_subnormal());
    assert!(!d128::from_bits(0x1b4cc22b9c3e09bd8a09c2efa4609a41).is_subnormal());
    assert!(!d128::from_bits(0x238f2cfa1d644f695cf1e547007227bd).is_subnormal());
    assert!(!d128::from_bits(0x247e394a27efd967381010001400081c).is_subnormal());
    assert!(!d128::from_bits(0x264a0000000000000000000000000000).is_subnormal());
    assert!(!d128::from_bits(0x402afbe261e6cd8a65a1629af55f94be).is_subnormal());
    assert!(!d128::from_bits(0x46360000000000000000000000000000).is_subnormal());
    assert!(!d128::from_bits(0x7c003fffffffffff38c15b08ffffffff).is_subnormal());
    assert!(!d128::from_bits(0x7c003fffffffffff38c15b0affffffff).is_subnormal());
    assert!(d128::from_bits(0x8000001400000004ffffffffffffffef).is_subnormal());
    assert!(!d128::from_bits(0x92a9700a58e271c45f52b6c080f12c07).is_subnormal());
    assert!(!d128::from_bits(0xa83e0000000000000000000000000000).is_subnormal());
    assert!(!d128::from_bits(0xbefbefbfaf5bdfddaddfe727ecde7d3b).is_subnormal());
    assert!(!d128::from_bits(0xd754ce3bc22f555f79c8815335535001).is_subnormal());
    assert!(!d128::from_bits(0xd9000000000000000000000000000000).is_subnormal());
    assert!(!d128::from_bits(0xfdfdf7ff7ffdf7bfffffefffffffffaf).is_subnormal());
    assert!(!"-inf".parse::<d128>().unwrap().is_subnormal());
    assert!(!"inf".parse::<d128>().unwrap().is_subnormal());
    assert!(!"qNaN".parse::<d128>().unwrap().is_subnormal());
    assert!(!"sNaN".parse::<d128>().unwrap().is_subnormal());
}

#[test]
#[rustfmt::skip]
fn bid32_abs() {
    assert_eq!(Bits(d32::from_bits(0x00000001).abs().to_bits()), Bits(d32::from_bits(0x00000001).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x00080001).abs().to_bits()), Bits(d32::from_bits(0x00080001).to_bits()));
    assert_eq!(Bits("-1.0".parse::<d32>().unwrap().abs().to_bits()), Bits(d32::from_bits(0x3200000a).to_bits()));
    assert_eq!(Bits("1.0".parse::<d32>().unwrap().abs().to_bits()), Bits(d32::from_bits(0x3200000a).to_bits()));
    assert_eq!(Bits("-1.0e-96".parse::<d32>().unwrap().abs().to_bits()), Bits(d32::from_bits(0x0200000a).to_bits()));
    assert_eq!(Bits("1.0e-96".parse::<d32>().unwrap().abs().to_bits()), Bits(d32::from_bits(0x0200000a).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x6098967f).abs().to_bits()), Bits(d32::from_bits(0x6098967f).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x60989680).abs().to_bits()), Bits(d32::from_bits(0x60989680).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x7c000000).abs().to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x7c8f423f).abs().to_bits()), Bits(d32::from_bits(0x7c8f423f).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x7c8f4240).abs().to_bits()), Bits(d32::from_bits(0x7c8f4240).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x7e100000).abs().to_bits()), Bits(d32::from_bits(0x7e100000).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x7e100100).abs().to_bits()), Bits(d32::from_bits(0x7e100100).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x7e8f423f).abs().to_bits()), Bits(d32::from_bits(0x7e8f423f).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x7e8f4240).abs().to_bits()), Bits(d32::from_bits(0x7e8f4240).to_bits()));
    assert_eq!(Bits(d32::from_bits(0x80000001).abs().to_bits()), Bits(d32::from_bits(0x00000001).to_bits()));
    assert_eq!(Bits("-9.999999e-95".parse::<d32>().unwrap().abs().to_bits()), Bits(d32::from_bits(0x6018967f).to_bits()));
    assert_eq!(Bits("9.999999e-95".parse::<d32>().unwrap().abs().to_bits()), Bits(d32::from_bits(0x6018967f).to_bits()));
    assert_eq!(Bits("-9.999999e96".parse::<d32>().unwrap().abs().to_bits()), Bits(d32::from_bits(0x77f8967f).to_bits()));
    assert_eq!(Bits("9.999999e96".parse::<d32>().unwrap().abs().to_bits()), Bits(d32::from_bits(0x77f8967f).to_bits()));
    assert_eq!(Bits(d32::from_bits(0xfc100000).abs().to_bits()), Bits(d32::from_bits(0x7c100000).to_bits()));
    assert_eq!(Bits(d32::from_bits(0xfc100100).abs().to_bits()), Bits(d32::from_bits(0x7c100100).to_bits()));
    assert_eq!(Bits(d32::from_bits(0xfe000000).abs().to_bits()), Bits(d32::from_bits(0x7e000000).to_bits()));
}

#[test]
#[rustfmt::skip]
fn bid32_class() {
    assert_eq!(d32::from_bits(0x00082041).classify(), FpCategory::Subnormal);
    assert!(d32::from_bits(0x00082041).is_sign_positive());
    assert_eq!(d32::from_bits(0x27000000).classify(), FpCategory::Zero);
    assert!(d32::from_bits(0x27000000).is_sign_positive());
    assert_eq!(d32::from_bits(0x328f423f).classify(), FpCategory::Normal);
    assert!(d32::from_bits(0x328f423f).is_sign_positive());
    assert_eq!(d32::from_bits(0x607fffff).classify(), FpCategory::Zero);
    assert!(d32::from_bits(0x607fffff).is_sign_positive());
    assert_eq!(d32::from_bits(0x658c3437).classify(), FpCategory::Normal);
    assert!(d32::from_bits(0x658c3437).is_sign_positive());
    assert_eq!(d32::from_bits(0x78000000).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0x78000000).is_sign_positive());
    assert_eq!(d32::from_bits(0x78000001).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0x78000001).is_sign_positive());
    assert_eq!(d32::from_bits(0x78001000).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0x78001000).is_sign_positive());
    assert_eq!(d32::from_bits(0x780fffff).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0x780fffff).is_sign_positive());
    assert_eq!(d32::from_bits(0x78f00000).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0x78f00000).is_sign_positive());
    assert_eq!(d32::from_bits(0x78f00001).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0x78f00001).is_sign_positive());
    assert_eq!(d32::from_bits(0x78ffffff).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0x78ffffff).is_sign_positive());
    assert_eq!(d32::from_bits(0x7c000000).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7c000000).is_snan());
    assert_eq!(d32::from_bits(0x7c000001).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7c000001).is_snan());
    assert_eq!(d32::from_bits(0x7c001000).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7c001000).is_snan());
    assert_eq!(d32::from_bits(0x7c0f4240).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7c0f4240).is_snan());
    assert_eq!(d32::from_bits(0x7c0fffff).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7c0fffff).is_snan());
    assert_eq!(d32::from_bits(0x7c8f423f).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7c8f423f).is_snan());
    assert_eq!(d32::from_bits(0x7c8f4240).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7c8f4240).is_snan());
    assert_eq!(d32::from_bits(0x7c8f4241).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7c8f4241).is_snan());
    assert_eq!(d32::from_bits(0x7cf00000).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7cf00000).is_snan());
    assert_eq!(d32::from_bits(0x7cf00001).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7cf00001).is_snan());
    assert_eq!(d32::from_bits(0x7cffffff).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0x7cffffff).is_snan());
    assert_eq!(d32::from_bits(0x7e000000).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7e000000).is_snan());
    assert_eq!(d32::from_bits(0x7e000001).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7e000001).is_snan());
    assert_eq!(d32::from_bits(0x7e000100).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7e000100).is_snan());
    assert_eq!(d32::from_bits(0x7e0f4240).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7e0f4240).is_snan());
    assert_eq!(d32::from_bits(0x7e0fffff).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7e0fffff).is_snan());
    assert_eq!(d32::from_bits(0x7e8f423f).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7e8f423f).is_snan());
    assert_eq!(d32::from_bits(0x7e8f4240).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7e8f4240).is_snan());
    assert_eq!(d32::from_bits(0x7e8f4241).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7e8f4241).is_snan());
    assert_eq!(d32::from_bits(0x7ef00000).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7ef00000).is_snan());
    assert_eq!(d32::from_bits(0x7ef00001).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7ef00001).is_snan());
    assert_eq!(d32::from_bits(0x7effffff).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0x7effffff).is_snan());
    assert_eq!(d32::from_bits(0x8298e75f).classify(), FpCategory::Normal);
    assert!(d32::from_bits(0x8298e75f).is_sign_negative());
    assert_eq!(d32::from_bits(0xf420b31f).classify(), FpCategory::Normal);
    assert!(d32::from_bits(0xf420b31f).is_sign_negative());
    assert_eq!(d32::from_bits(0xf71fffff).classify(), FpCategory::Zero);
    assert!(d32::from_bits(0xf71fffff).is_sign_negative());
    assert_eq!(d32::from_bits(0xf8000000).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0xf8000000).is_sign_negative());
    assert_eq!(d32::from_bits(0xf8000001).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0xf8000001).is_sign_negative());
    assert_eq!(d32::from_bits(0xf8001000).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0xf8001000).is_sign_negative());
    assert_eq!(d32::from_bits(0xf80fffff).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0xf80fffff).is_sign_negative());
    assert_eq!(d32::from_bits(0xf8f00000).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0xf8f00000).is_sign_negative());
    assert_eq!(d32::from_bits(0xf8f00001).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0xf8f00001).is_sign_negative());
    assert_eq!(d32::from_bits(0xf8ffffff).classify(), FpCategory::Infinite);
    assert!(d32::from_bits(0xf8ffffff).is_sign_negative());
    assert_eq!(d32::from_bits(0xfc000000).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfc000000).is_snan());
    assert_eq!(d32::from_bits(0xfc000001).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfc000001).is_snan());
    assert_eq!(d32::from_bits(0xfc001000).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfc001000).is_snan());
    assert_eq!(d32::from_bits(0xfc0f4240).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfc0f4240).is_snan());
    assert_eq!(d32::from_bits(0xfc0fffff).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfc0fffff).is_snan());
    assert_eq!(d32::from_bits(0xfc8f423f).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfc8f423f).is_snan());
    assert_eq!(d32::from_bits(0xfc8f4240).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfc8f4240).is_snan());
    assert_eq!(d32::from_bits(0xfc8f4241).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfc8f4241).is_snan());
    assert_eq!(d32::from_bits(0xfcf00000).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfcf00000).is_snan());
    assert_eq!(d32::from_bits(0xfcf00001).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfcf00001).is_snan());
    assert_eq!(d32::from_bits(0xfcffffff).classify(), FpCategory::Nan);
    assert!(!d32::from_bits(0xfcffffff).is_snan());
    assert_eq!(d32::from_bits(0xfe000000).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0xfe000000).is_snan());
    assert_eq!(d32::from_bits(0xfe000001).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0xfe000001).is_snan());
    assert_eq!(d32::from_bits(0xfe000100).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0xfe000100).is_snan());
    assert_eq!(d32::from_bits(0xfe0fffff).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0xfe0fffff).is_snan());
    assert_eq!(d32::from_bits(0xfe8f423f).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0xfe8f423f).is_snan());
    assert_eq!(d32::from_bits(0xfe8f4240).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0xfe8f4240).is_snan());
    assert_eq!(d32::from_bits(0xfe8f4241).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0xfe8f4241).is_snan());
    assert_eq!(d32::from_bits(0xfef00000).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0xfef00000).is_snan());
    assert_eq!(d32::from_bits(0xfef00001).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0xfef00001).is_snan());
    assert_eq!(d32::from_bits(0xfeffffff).classify(), FpCategory::Nan);
    assert!(d32::from_bits(0xfeffffff).is_snan());
    assert_eq!(d32::from_bits(0x00000000).classify(), FpCategory::Zero);
    assert!(d32::from_bits(0x00000000).is_sign_positive());
    assert_eq!(d32::from_bits(0x80000000).classify(), FpCategory::Zero);
    assert!(d32::from_bits(0x80000000).is_sign_negative());
    assert_eq!(d32::from_bits(0x00000001).classify(), FpCategory::Subnormal);
    assert!(d32::from_bits(0x00000001).is_sign_positive());
    assert_eq!(d32::from_bits(0x80000001).classify(), FpCategory::Subnormal);
    assert!(d32::from_bits(0x80000001).is_sign_negative());
}

#[test]
#[rustfmt::skip]
fn bid32_from_string() {
    assert_eq!(Bits(d32::parse_rounding("1.0000015", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4242).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x3200000a).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("-1.0", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0xb200000a).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0e-96", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x0200000a).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("-1.0e-96", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x8200000a).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("9.999999e-95", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x6018967f).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("-9.999999e-95", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0xe018967f).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("9.999999e96", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x77f8967f).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("-9.999999e96", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0xf7f8967f).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+NaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+NaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("-NaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0xfc000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7e000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7e000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("-sNaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0xfe000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000015", Rounding::Down).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4241).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000015", Rounding::Up).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4242).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000015", Rounding::Zero).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4241).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000015", Rounding::TiesAway).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4242).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("-9.9999995", Rounding::Up).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0xebf8967f).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("-9.9999995", Rounding::Down).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0xb00f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("9.9999995", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x300f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("9.9999995", Rounding::Up).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x300f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("9.9999995", Rounding::TiesAway).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x300f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("9.9999995", Rounding::Zero).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x6bf8967f).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("9.9999995", Rounding::Down).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x6bf8967f).to_bits()));
    assert_eq!(Bits(d32::parse_rounding(".0", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x32000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("000.0", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x32000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("0.0000000000000000000000000000000000001001", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x1e8003e9).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("0.0000000000000000000000000000000000001001", Rounding::Down).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x1e8003e9).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("0.", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x32800000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x32800001).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("a", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("..", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1..", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("0.0.", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000005", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000005", Rounding::Up).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4241).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000005", Rounding::TiesAway).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4241).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000005", Rounding::Zero).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000005", Rounding::Down).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.00000051", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4241).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.00000051", Rounding::Up).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4241).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.00000051", Rounding::TiesAway).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4241).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.00000051", Rounding::Zero).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.00000051", Rounding::Down).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000004999999999999999", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000004999999999999999", Rounding::Up).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4241).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000004999999999999999", Rounding::Down).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000004999999999999999", Rounding::TiesAway).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000004999999999999999", Rounding::Zero).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4240).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.1e2", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x3300000b).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.1p2", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.1ee", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.1p-2", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.1e-2e", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000015", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4242).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000015", Rounding::Up).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4242).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000015", Rounding::TiesAway).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4242).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000015", Rounding::Zero).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4241).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1.0000015", Rounding::Down).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x2f8f4241).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+infi", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+NaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7e000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7e000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+NaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7e000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("+infi", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("infi", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("NaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("sNaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7e000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("sNaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7e000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("NaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("sNaN", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7e000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("inf", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x78000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("infi", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x7c000000).to_bits()));
    assert_eq!(Bits(d32::parse_rounding("1e-102", Rounding::Nearest).unwrap_or(d32::NAN).to_bits()), Bits(d32::from_bits(0x00000000).to_bits()));
}

#[test]
#[rustfmt::skip]
fn bid32_isFinite() {
    assert!(d32::from_bits(0x00000001).is_finite());
    assert!(d32::from_bits(0x00080001).is_finite());
    assert!("-1.0".parse::<d32>().unwrap().is_finite());
    assert!("1.0".parse::<d32>().unwrap().is_finite());
    assert!("-1.0e-96".parse::<d32>().unwrap().is_finite());
    assert!("1.0e-96".parse::<d32>().unwrap().is_finite());
    assert!(d32::from_bits(0x6098967f).is_finite());
    assert!(d32::from_bits(0x60989680).is_finite());
    assert!(!d32::from_bits(0x7c000000).is_finite());
    assert!(!d32::from_bits(0x7c8f423f).is_finite());
    assert!(!d32::from_bits(0x7c8f4240).is_finite());
    assert!(!d32::from_bits(0x7e100000).is_finite());
    assert!(!d32::from_bits(0x7e100100).is_finite());
    assert!(!d32::from_bits(0x7e8f423f).is_finite());
    assert!(!d32::from_bits(0x7e8f4240).is_finite());
    assert!(d32::from_bits(0x80000001).is_finite());
    assert!("-9.999999e-95".parse::<d32>().unwrap().is_finite());
    assert!("9.999999e-95".parse::<d32>().unwrap().is_finite());
    assert!("-9.999999e96".parse::<d32>().unwrap().is_finite());
    assert!("9.999999e96".parse::<d32>().unwrap().is_finite());
    assert!(!d32::from_bits(0xfc100000).is_finite());
    assert!(!d32::from_bits(0xfc100100).is_finite());
    assert!(!d32::from_bits(0xfe000000).is_finite());
}

#[test]
#[rustfmt::skip]
fn bid32_isInf() {
    assert!(!d32::from_bits(0x00000001).is_infinite());
    assert!(!d32::from_bits(0x00080001).is_infinite());
    assert!(!"-1.0".parse::<d32>().unwrap().is_infinite());
    assert!(!"1.0".parse::<d32>().unwrap().is_infinite());
    assert!(!"-1.0e-96".parse::<d32>().unwrap().is_infinite());
    assert!(!"1.0e-96".parse::<d32>().unwrap().is_infinite());
    assert!(!d32::from_bits(0x6098967f).is_infinite());
    assert!(!d32::from_bits(0x60989680).is_infinite());
    assert!(!d32::from_bits(0x7c000000).is_infinite());
    assert!(!d32::from_bits(0x7c8f423f).is_infinite());
    assert!(!d32::from_bits(0x7c8f4240).is_infinite());
    assert!(!d32::from_bits(0x7e100000).is_infinite());
    assert!(!d32::from_bits(0x7e100100).is_infinite());
    assert!(!d32::from_bits(0x7e8f423f).is_infinite());
    assert!(!d32::from_bits(0x7e8f4240).is_infinite());
    assert!(!d32::from_bits(0x80000001).is_infinite());
    assert!(!"-9.999999e-95".parse::<d32>().unwrap().is_infinite());
    assert!(!"9.999999e-95".parse::<d32>().unwrap().is_infinite());
    assert!(!"-9.999999e96".parse::<d32>().unwrap().is_infinite());
    assert!(!"9.999999e96".parse::<d32>().unwrap().is_infinite());
    assert!(!d32::from_bits(0xfc100000).is_infinite());
    assert!(!d32::from_bits(0xfc100100).is_infinite());
    assert!(!d32::from_bits(0xfe000000).is_infinite());
    assert!(d32::from_bits(0x78000000).is_infinite());
    assert!(d32::from_bits(0xf8000000).is_infinite());
}

#[test]
#[rustfmt::skip]
fn bid32_isNaN() {
    assert!(!d32::from_bits(0x00000001).is_nan());
    assert!(!d32::from_bits(0x00080001).is_nan());
    assert!(!"-1.0".parse::<d32>().unwrap().is_nan());
    assert!(!"1.0".parse::<d32>().unwrap().is_nan());
    assert!(!"-1.0e-96".parse::<d32>().unwrap().is_nan());
    assert!(!"1.0e-96".parse::<d32>().unwrap().is_nan());
    assert!(!d32::from_bits(0x6098967f).is_nan());
    assert!(!d32::from_bits(0x60989680).is_nan());
    assert!(d32::from_bits(0x7c000000).is_nan());
    assert!(d32::from_bits(0x7c8f423f).is_nan());
    assert!(d32::from_bits(0x7c8f4240).is_nan());
    assert!(d32::from_bits(0x7e100000).is_nan());
    assert!(d32::from_bits(0x7e100100).is_nan());
    assert!(d32::from_bits(0x7e8f423f).is_nan());
    assert!(d32::from_bits(0x7e8f4240).is_nan());
    assert!(!d32::from_bits(0x80000001).is_nan());
    assert!(!"-9.999999e-95".parse::<d32>().unwrap().is_nan());
    assert!(!"9.999999e-95".parse::<d32>().unwrap().is_nan());
    assert!(!"-9.999999e96".parse::<d32>().unwrap().is_nan());
    assert!(!"9.999999e96".parse::<d32>().unwrap().is_nan());
    assert!(d32::from_bits(0xfc100000).is_nan());
    assert!(d32::from_bits(0xfc100100).is_nan());
    assert!(d32::from_bits(0xfe000000).is_nan());
}

#[test]
#[rustfmt::skip]
fn bid32_isNormal() {
    assert!(!d32::from_bits(0x00000001).is_normal());
    assert!(!d32::from_bits(0x00080001).is_normal());
    assert!(d32::from_bits(0x029259a6).is_normal());
    assert!(d32::from_bits(0x02f69ec8).is_normal());
    assert!(!d32::from_bits(0x0a800000).is_normal());
    assert!("-1.0".parse::<d32>().unwrap().is_normal());
    assert!("1.0".parse::<d32>().unwrap().is_normal());
    assert!(!"-1.0e-96".parse::<d32>().unwrap().is_normal());
    assert!(!"1.0e-96".parse::<d32>().unwrap().is_normal());
    assert!(d32::from_bits(0x6098967f).is_normal());
    assert!(!d32::from_bits(0x60989680).is_normal());
    assert!(!d32::from_bits(0x7c000000).is_normal());
    assert!(!d32::from_bits(0x7c8f423f).is_normal());
    assert!(!d32::from_bits(0x7c8f4240).is_normal());
    assert!(!d32::from_bits(0x7e100000).is_normal());
    assert!(!d32::from_bits(0x7e100100).is_normal());
    assert!(!d32::from_bits(0x7e8f423f).is_normal());
    assert!(!d32::from_bits(0x7e8f4240).is_normal());
    assert!(!d32::from_bits(0x80000001).is_normal());
    assert!(d32::from_bits(0x82f69ec3).is_normal());
    assert!(d32::from_bits(0x82f69ec8).is_normal());
    assert!("-9.999999e-95".parse::<d32>().unwrap().is_normal());
    assert!("9.999999e-95".parse::<d32>().unwrap().is_normal());
    assert!("-9.999999e96".parse::<d32>().unwrap().is_normal());
    assert!("9.999999e96".parse::<d32>().unwrap().is_normal());
    assert!(!d32::from_bits(0xfc100000).is_normal());
    assert!(!d32::from_bits(0xfc100100).is_normal());
    assert!(!d32::from_bits(0xfe000000).is_normal());
}

#[test]
#[rustfmt::skip]
fn bid32_isSigned() {
    assert!(!d32::from_bits(0x00000001).is_sign_negative());
    assert!(!d32::from_bits(0x00080001).is_sign_negative());
    assert!(!"1.0".parse::<d32>().unwrap().is_sign_negative());
    assert!("-1.0".parse::<d32>().unwrap().is_sign_negative());
    assert!(!"1.0e-96".parse::<d32>().unwrap().is_sign_negative());
    assert!("-1.0e-96".parse::<d32>().unwrap().is_sign_negative());
    assert!(!d32::from_bits(0x6098967f).is_sign_negative());
    assert!(!d32::from_bits(0x60989680).is_sign_negative());
    assert!(!d32::from_bits(0x7c000000).is_sign_negative());
    assert!(!d32::from_bits(0x7c8f423f).is_sign_negative());
    assert!(!d32::from_bits(0x7c8f4240).is_sign_negative());
    assert!(!d32::from_bits(0x7e100000).is_sign_negative());
    assert!(!d32::from_bits(0x7e100100).is_sign_negative());
    assert!(!d32::from_bits(0x7e8f423f).is_sign_negative());
    assert!(!d32::from_bits(0x7e8f4240).is_sign_negative());
    assert!(d32::from_bits(0x80000001).is_sign_negative());
    assert!(!"9.999999e-95".parse::<d32>().unwrap().is_sign_negative());
    assert!("-9.999999e-95".parse::<d32>().unwrap().is_sign_negative());
    assert!(!"9.999999e96".parse::<d32>().unwrap().is_sign_negative());
    assert!("-9.999999e96".parse::<d32>().unwrap().is_sign_negative());
    assert!(d32::from_bits(0xfc100000).is_sign_negative());
    assert!(d32::from_bits(0xfc100100).is_sign_negative());
    assert!(d32::from_bits(0xfe000000).is_sign_negative());
}

#[test]
#[rustfmt::skip]
fn bid32_isSubnormal() {
    assert!(d32::from_bits(0x00000001).is_subnormal());
    assert!(d32::from_bits(0x00080001).is_subnormal());
    assert!(!d32::from_bits(0x0292599f).is_subnormal());
    assert!(!d32::from_bits(0x029259a4).is_subnormal());
    assert!(!d32::from_bits(0x029259a6).is_subnormal());
    assert!(!d32::from_bits(0x02f69ec8).is_subnormal());
    assert!(!"-1.0".parse::<d32>().unwrap().is_subnormal());
    assert!(!"1.0".parse::<d32>().unwrap().is_subnormal());
    assert!("-1.0e-96".parse::<d32>().unwrap().is_subnormal());
    assert!("1.0e-96".parse::<d32>().unwrap().is_subnormal());
    assert!(!d32::from_bits(0x6098967f).is_subnormal());
    assert!(!d32::from_bits(0x60989680).is_subnormal());
    assert!(!d32::from_bits(0x7c000000).is_subnormal());
    assert!(!d32::from_bits(0x7c8f423f).is_subnormal());
    assert!(!d32::from_bits(0x7c8f4240).is_subnormal());
    assert!(!d32::from_bits(0x7e100000).is_subnormal());
    assert!(!d32::from_bits(0x7e100100).is_subnormal());
    assert!(!d32::from_bits(0x7e8f423f).is_subnormal());
    assert!(!d32::from_bits(0x7e8f4240).is_subnormal());
    assert!(d32::from_bits(0x80000001).is_subnormal());
    assert!(!"-9.999999e-95".parse::<d32>().unwrap().is_subnormal());
    assert!(!"9.999999e-95".parse::<d32>().unwrap().is_subnormal());
    assert!(!"-9.999999e96".parse::<d32>().unwrap().is_subnormal());
    assert!(!"9.999999e96".parse::<d32>().unwrap().is_subnormal());
    assert!(!d32::from_bits(0xbf800000).is_subnormal());
    assert!(!d32::from_bits(0xfc100000).is_subnormal());
    assert!(!d32::from_bits(0xfc100100).is_subnormal());
    assert!(!d32::from_bits(0xfe000000).is_subnormal());
}

#[test]
#[rustfmt::skip]
fn bid64_abs() {
    assert_eq!(Bits("-0".parse::<d64>().unwrap().abs().to_bits()), Bits(d64::from_bits(0x31c0000000000000).to_bits()));
    assert_eq!(Bits(d64::from_bits(0x0c2f000000000000).abs().to_bits()), Bits(d64::from_bits(0x0c2f000000000000).to_bits()));
    assert_eq!(Bits(d64::from_bits(0x0eada90166c6c0e3).abs().to_bits()), Bits(d64::from_bits(0x0eada90166c6c0e3).to_bits()));
    assert_eq!(Bits(d64::from_bits(0x3a52266e9c893405).abs().to_bits()), Bits(d64::from_bits(0x3a52266e9c893405).to_bits()));
    assert_eq!(Bits(d64::from_bits(0x4820000000000000).abs().to_bits()), Bits(d64::from_bits(0x4820000000000000).to_bits()));
    assert_eq!(Bits(d64::from_bits(0x4c25e2eef8bedf06).abs().to_bits()), Bits(d64::from_bits(0x4c25e2eef8bedf06).to_bits()));
    assert_eq!(Bits(d64::from_bits(0x5972aa2ec1ca6dac).abs().to_bits()), Bits(d64::from_bits(0x5972aa2ec1ca6dac).to_bits()));
    assert_eq!(Bits(d64::from_bits(0x673828de6d87f005).abs().to_bits()), Bits(d64::from_bits(0x673828de6d87f005).to_bits()));
    assert_eq!(Bits(d64::from_bits(0x6efa41c0e86b768b).abs().to_bits()), Bits(d64::from_bits(0x6efa41c0e86b768b).to_bits()));
    assert_eq!(Bits(d64::from_bits(0xe15b6196405c5cd9).abs().to_bits()), Bits(d64::from_bits(0x615b6196405c5cd9).to_bits()));
    assert_eq!(Bits(d64::from_bits(0xedfb16881efb7901).abs().to_bits()), Bits(d64::from_bits(0x6dfb16881efb7901).to_bits()));
    assert_eq!(Bits(d64::from_bits(0xf4724d2349d55f24).abs().to_bits()), Bits(d64::from_bits(0x74724d2349d55f24).to_bits()));
    assert_eq!(Bits("inf".parse::<d64>().unwrap().abs().to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits("qNaN".parse::<d64>().unwrap().abs().to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits("sNaN".parse::<d64>().unwrap().abs().to_bits()), Bits(d64::from_bits(0x7e00000000000000).to_bits()));
}

#[test]
#[rustfmt::skip]
fn bid64_class() {
    assert_eq!(d64::from_bits(0x0000000040100000).classify(), FpCategory::Subnormal);
    assert!(d64::from_bits(0x0000000040100000).is_sign_positive());
    assert_eq!("-0".parse::<d64>().unwrap().classify(), FpCategory::Zero);
    assert!("-0".parse::<d64>().unwrap().is_sign_negative());
    assert_eq!("0".parse::<d64>().unwrap().classify(), FpCategory::Zero);
    assert!("0".parse::<d64>().unwrap().is_sign_positive());
    assert_eq!(d64::from_bits(0x069a36c8f9c09818).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0x069a36c8f9c09818).is_sign_positive());
    assert_eq!(d64::from_bits(0x1000000000000000).classify(), FpCategory::Zero);
    assert!(d64::from_bits(0x1000000000000000).is_sign_positive());
    assert_eq!(d64::from_bits(0x18ebf0eb84027607).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0x18ebf0eb84027607).is_sign_positive());
    assert_eq!(d64::from_bits(0x2407f5972ed7b76b).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0x2407f5972ed7b76b).is_sign_positive());
    assert_eq!(d64::from_bits(0x3e2a85a98df1a62e).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0x3e2a85a98df1a62e).is_sign_positive());
    assert_eq!(d64::from_bits(0x72bb05ed5f217403).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0x72bb05ed5f217403).is_sign_positive());
    assert_eq!(d64::from_bits(0x73dc9f0cefef8aef).classify(), FpCategory::Zero);
    assert!(d64::from_bits(0x73dc9f0cefef8aef).is_sign_positive());
    assert_eq!(d64::from_bits(0x74a23c8f2229106a).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0x74a23c8f2229106a).is_sign_positive());
    assert_eq!(d64::from_bits(0x79fffade57fabf5b).classify(), FpCategory::Infinite);
    assert!(d64::from_bits(0x79fffade57fabf5b).is_sign_positive());
    assert_eq!(d64::from_bits(0x8c32d9f830270c43).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0x8c32d9f830270c43).is_sign_negative());
    assert_eq!(d64::from_bits(0x97c4180a6666476d).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0x97c4180a6666476d).is_sign_negative());
    assert_eq!(d64::from_bits(0xa5247757cbba3ba7).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0xa5247757cbba3ba7).is_sign_negative());
    assert_eq!(d64::from_bits(0xb61b100697ed86c3).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0xb61b100697ed86c3).is_sign_negative());
    assert_eq!(d64::from_bits(0xb6ee2fa4068519a5).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0xb6ee2fa4068519a5).is_sign_negative());
    assert_eq!(d64::from_bits(0xc1e50e97c4a1cb96).classify(), FpCategory::Normal);
    assert!(d64::from_bits(0xc1e50e97c4a1cb96).is_sign_negative());
    assert_eq!(d64::from_bits(0xf0c3ae213f30b8d8).classify(), FpCategory::Zero);
    assert!(d64::from_bits(0xf0c3ae213f30b8d8).is_sign_negative());
    assert_eq!(d64::from_bits(0xfbfffefffffffeff).classify(), FpCategory::Infinite);
    assert!(d64::from_bits(0xfbfffefffffffeff).is_sign_negative());
    assert_eq!(d64::from_bits(0xfde7bf7f3d7bafd8).classify(), FpCategory::Nan);
    assert!(!d64::from_bits(0xfde7bf7f3d7bafd8).is_snan());
    assert_eq!(d64::from_bits(0xfffefffffffffeff).classify(), FpCategory::Nan);
    assert!(d64::from_bits(0xfffefffffffffeff).is_snan());
    assert_eq!("-inf".parse::<d64>().unwrap().classify(), FpCategory::Infinite);
    assert!("-inf".parse::<d64>().unwrap().is_sign_negative());
    assert_eq!("inf".parse::<d64>().unwrap().classify(), FpCategory::Infinite);
    assert!("inf".parse::<d64>().unwrap().is_sign_positive());
    assert_eq!("qNaN".parse::<d64>().unwrap().classify(), FpCategory::Nan);
    assert!(!"qNaN".parse::<d64>().unwrap().is_snan());
    assert_eq!("sNaN".parse::<d64>().unwrap().classify(), FpCategory::Nan);
    assert!("sNaN".parse::<d64>().unwrap().is_snan());
    assert_eq!(d64::from_bits(0x8000000040100000).classify(), FpCategory::Subnormal);
    assert!(d64::from_bits(0x8000000040100000).is_sign_negative());
}

#[test]
#[rustfmt::skip]
fn bid64_from_string() {
    assert_eq!(Bits(d64::parse_rounding("12345678901234565", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits("1234567890123456e1".parse::<d64>().unwrap().to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+NaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7e00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("12345678901234565", Rounding::Down).unwrap_or(d64::NAN).to_bits()), Bits("1234567890123456e1".parse::<d64>().unwrap().to_bits()));
    assert_eq!(Bits(d64::parse_rounding("12345678901234565", Rounding::Up).unwrap_or(d64::NAN).to_bits()), Bits("1234567890123457e1".parse::<d64>().unwrap().to_bits()));
    assert_eq!(Bits(d64::parse_rounding("12345678901234565", Rounding::Zero).unwrap_or(d64::NAN).to_bits()), Bits("1234567890123456e1".parse::<d64>().unwrap().to_bits()));
    assert_eq!(Bits(d64::parse_rounding("12345678901234565", Rounding::TiesAway).unwrap_or(d64::NAN).to_bits()), Bits("1234567890123457e1".parse::<d64>().unwrap().to_bits()));
    assert_eq!(Bits(d64::parse_rounding("-9.9999999999999995", Rounding::Up).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0xebfb86f26fc0ffff).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("-9.9999999999999995", Rounding::Down).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0xb0038d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("9.9999999999999995", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x30038d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("9.9999999999999995", Rounding::Up).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x30038d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("9.9999999999999995", Rounding::TiesAway).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x30038d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("9.9999999999999995", Rounding::Zero).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x6bfb86f26fc0ffff).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("9.9999999999999995", Rounding::Down).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x6bfb86f26fc0ffff).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000015", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68002).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000015", Rounding::Up).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68002).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000015", Rounding::TiesAway).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68002).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000015", Rounding::Zero).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68001).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000015", Rounding::Down).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68001).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("000.0", Rounding::Down).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x31a0000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("0.0000000000000000000000000000000000000000000001001", Rounding::Down).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2ba00000000003e9).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("0.0000000000000000000000000000000000000000000001001", Rounding::Down).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2ba00000000003e9).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("0.", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x31c0000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x31c0000000000001).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1..", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000005", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000005", Rounding::Up).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68001).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000005", Rounding::TiesAway).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68001).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000005", Rounding::Zero).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000005", Rounding::Down).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.00000000000000051", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68001).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.00000000000000051", Rounding::Up).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68001).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.00000000000000051", Rounding::TiesAway).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68001).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.00000000000000051", Rounding::Zero).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.00000000000000051", Rounding::Down).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000004999999999999999", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000004999999999999999", Rounding::Up).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68001).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000004999999999999999", Rounding::Down).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000004999999999999999", Rounding::TiesAway).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.0000000000000004999999999999999", Rounding::Zero).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x2fe38d7ea4c68000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.1e2", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x31e000000000000b).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.1p2", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.1ee", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.1p-2", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("1.1e-2e", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+infi", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+NaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7e00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7e00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+NaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+sNaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7e00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("+infi", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("infi", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("NaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("sNaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7e00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("sNaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7e00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("NaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("sNaN", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7e00000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("inf", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7800000000000000).to_bits()));
    assert_eq!(Bits(d64::parse_rounding("infi", Rounding::Nearest).unwrap_or(d64::NAN).to_bits()), Bits(d64::from_bits(0x7c00000000000000).to_bits()));
}

#[test]
#[rustfmt::skip]
fn bid64_isFinite() {
    assert!("-0".parse::<d64>().unwrap().is_finite());
    assert!("0".parse::<d64>().unwrap().is_finite());
    assert!(d64::from_bits(0x1608af5cb4593bf4).is_finite());
    assert!(d64::from_bits(0x2a166dfc84e76865).is_finite());
    assert!(d64::from_bits(0x54c0000000000000).is_finite());
    assert!(d64::from_bits(0x85c107f0c960db7e).is_finite());
    assert!(d64::from_bits(0x99b52df1feac4415).is_finite());
    assert!(d64::from_bits(0xa5d5d70134196a1a).is_finite());
    assert!(d64::from_bits(0xaf20000000000000).is_finite());
    assert!(d64::from_bits(0xbec96a9433a05fc7).is_finite());
    assert!(d64::from_bits(0xc235bf6d4565f8c4).is_finite());
    assert!(d64::from_bits(0xdc5055f8523440b9).is_finite());
    assert!(d64::from_bits(0xe8fd289d8852613a).is_finite());
    assert!(!"-inf".parse::<d64>().unwrap().is_finite());
    assert!(!"qNaN".parse::<d64>().unwrap().is_finite());
    assert!(!"sNaN".parse::<d64>().unwrap().is_finite());
}

#[test]
#[rustfmt::skip]
fn bid64_isInf() {
    assert!(!"-0".parse::<d64>().unwrap().is_infinite());
    assert!(!"0".parse::<d64>().unwrap().is_infinite());
    assert!(!d64::from_bits(0x0e2a000000000000).is_infinite());
    assert!(!d64::from_bits(0x426bd93b6d5a55ff).is_infinite());
    assert!(!d64::from_bits(0x452ed318d6be629d).is_infinite());
    assert!(!d64::from_bits(0x83b9dd4ef6f10188).is_infinite());
    assert!(!d64::from_bits(0x8b5d556f8b318648).is_infinite());
    assert!(!d64::from_bits(0x931f66ce5754afaa).is_infinite());
    assert!(!d64::from_bits(0x9840000000000000).is_infinite());
    assert!(!d64::from_bits(0x9e2fe80093f4056b).is_infinite());
    assert!(!d64::from_bits(0xc57708cdda260a7c).is_infinite());
    assert!(!d64::from_bits(0xdc929d20fa722a17).is_infinite());
    assert!(!d64::from_bits(0xddaedd7658bad294).is_infinite());
    assert!("inf".parse::<d64>().unwrap().is_infinite());
    assert!(!"qNaN".parse::<d64>().unwrap().is_infinite());
    assert!(!"sNaN".parse::<d64>().unwrap().is_infinite());
    assert!(d64::from_bits(0x7800000000000000).is_infinite());
    assert!(d64::from_bits(0xf800000000000000).is_infinite());
}

#[test]
#[rustfmt::skip]
fn bid64_isNaN() {
    assert!(!"0".parse::<d64>().unwrap().is_nan());
    assert!(!d64::from_bits(0x2437f7cf38a63db8).is_nan());
    assert!(!d64::from_bits(0x2d8cedba6d10597e).is_nan());
    assert!(!d64::from_bits(0x385ba1cbb8c2bcf9).is_nan());
    assert!(!d64::from_bits(0x6031b795cfce0912).is_nan());
    assert!(!d64::from_bits(0x81c72ce22dc94c5d).is_nan());
    assert!(!d64::from_bits(0xbd673245d19d51eb).is_nan());
    assert!(!d64::from_bits(0xd11909bcbc0ef969).is_nan());
    assert!(!d64::from_bits(0xd6124b4e9e27cf82).is_nan());
    assert!(!d64::from_bits(0xdb70d6ecf4cea09e).is_nan());
    assert!(!d64::from_bits(0xe649f50970cd7b28).is_nan());
    assert!(!"-inf".parse::<d64>().unwrap().is_nan());
    assert!(!"inf".parse::<d64>().unwrap().is_nan());
    assert!("qNaN".parse::<d64>().unwrap().is_nan());
}

#[test]
#[rustfmt::skip]
fn bid64_isNormal() {
    assert!(!"0".parse::<d64>().unwrap().is_normal());
    assert!(!d64::from_bits(0x0000000000000000).is_normal());
    assert!(!d64::from_bits(0x0000000220000880).is_normal());
    assert!(d64::from_bits(0x0042000880060800).is_normal());
    assert!(d64::from_bits(0x0f19eda8ce8d0d7c).is_normal());
    assert!(!d64::from_bits(0x1240000000000000).is_normal());
    assert!(d64::from_bits(0x176ca85dbd0e3ed8).is_normal());
    assert!(d64::from_bits(0x1b77fad26e664ee7).is_normal());
    assert!(d64::from_bits(0x20f6514fb338a22c).is_normal());
    assert!(d64::from_bits(0x56867713cac397e3).is_normal());
    assert!(d64::from_bits(0x6489214a172fbc88).is_normal());
    assert!(!d64::from_bits(0x6eaba7a5b910bc03).is_normal());
    assert!(d64::from_bits(0x94206ef326033fa3).is_normal());
    assert!(d64::from_bits(0xbbdd8c9fffac1f7b).is_normal());
    assert!(d64::from_bits(0xc3bdd7e750efbf92).is_normal());
    assert!(d64::from_bits(0xe97982db520f3b12).is_normal());
    assert!(d64::from_bits(0xf56adf1cb46269c8).is_normal());
    assert!(!d64::from_bits(0xfdeffefd7c367377).is_normal());
    assert!(!"-inf".parse::<d64>().unwrap().is_normal());
    assert!(!"inf".parse::<d64>().unwrap().is_normal());
    assert!(!"qNaN".parse::<d64>().unwrap().is_normal());
}

#[test]
#[rustfmt::skip]
fn bid64_isSigned() {
    assert!(!"0".parse::<d64>().unwrap().is_sign_negative());
    assert!(!d64::from_bits(0x0000000000000000).is_sign_negative());
    assert!("-0".parse::<d64>().unwrap().is_sign_negative());
    assert!(!d64::from_bits(0x09ef000000000000).is_sign_negative());
    assert!(!d64::from_bits(0x0e651dcf38049e2c).is_sign_negative());
    assert!(!d64::from_bits(0x18f64159f3d889fe).is_sign_negative());
    assert!(!d64::from_bits(0x57c0000000000000).is_sign_negative());
    assert!(d64::from_bits(0x8550e8a519089ef9).is_sign_negative());
    assert!(d64::from_bits(0x8fad471547a7465b).is_sign_negative());
    assert!(d64::from_bits(0xb2e180325c4db3a2).is_sign_negative());
    assert!(d64::from_bits(0xc0563045a9951137).is_sign_negative());
    assert!(d64::from_bits(0xc600000000000000).is_sign_negative());
    assert!(d64::from_bits(0xd5c48a1beee6bc7f).is_sign_negative());
    assert!(!"inf".parse::<d64>().unwrap().is_sign_negative());
    assert!("-inf".parse::<d64>().unwrap().is_sign_negative());
    assert!(!"sNaN".parse::<d64>().unwrap().is_sign_negative());
}

#[test]
#[rustfmt::skip]
fn bid64_isSubnormal() {
    assert!(!"-0".parse::<d64>().unwrap().is_subnormal());
    assert!(!d64::from_bits(0x0000000000000000).is_subnormal());
    assert!(d64::from_bits(0x0000010000200040).is_subnormal());
    assert!(!d64::from_bits(0x01c306b99e03c3d7).is_subnormal());
    assert!(!d64::from_bits(0x0ababb959e64802b).is_subnormal());
    assert!(!d64::from_bits(0x480968bfcbd60383).is_subnormal());
    assert!(!d64::from_bits(0x59b702267f365f3e).is_subnormal());
    assert!(!d64::from_bits(0x6041008000280000).is_subnormal());
    assert!(!d64::from_bits(0xa9e07f5c486a9a54).is_subnormal());
    assert!(!d64::from_bits(0xc1b9fe97c57e987d).is_subnormal());
    assert!(!d64::from_bits(0xceae0a0b6eb9fdfd).is_subnormal());
    assert!(!d64::from_bits(0xcfab61eda6d26c24).is_subnormal());
    assert!(!d64::from_bits(0xd609b99364c503d0).is_subnormal());
    assert!(!d64::from_bits(0xd612fd2145e1c711).is_subnormal());
    assert!(!d64::from_bits(0xde7b2a9a4ac39479).is_subnormal());
    assert!(!d64::from_bits(0xe33f4bdedd9ec7e9).is_subnormal());
    assert!(!d64::from_bits(0xf04a0d0a231ac1dc).is_subnormal());
    assert!(!d64::from_bits(0xfffffffffffffbff).is_subnormal());
    assert!(!"-inf".parse::<d64>().unwrap().is_subnormal());
    assert!(!"inf".parse::<d64>().unwrap().is_subnormal());
    assert!(!"qNaN".parse::<d64>().unwrap().is_subnormal());
    assert!(!"sNaN".parse::<d64>().unwrap().is_subnormal());
}
