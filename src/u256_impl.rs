use crate::traits::{BasicInt, DecimalFactors};
pub use primitive_types::U256 as u256;

// Code used to generate FACTORS
// #[test]
// fn generate() {
//     let mut value: crate::u256_impl::u256 = 1.into();
//     for _ in 0..77 {
//         println!("u256([{}, {}, {}, {}]),", value.0[0], value.0[1], value.0[2], value.0[3]);
//         value *= u256::from(10);
//     }
// }

impl DecimalFactors for primitive_types::U256 {
    const FACTORS: &'static [Self] = &[
        u256([1, 0, 0, 0]),
        u256([10, 0, 0, 0]),
        u256([100, 0, 0, 0]),
        u256([1000, 0, 0, 0]),
        u256([10000, 0, 0, 0]),
        u256([100000, 0, 0, 0]),
        u256([1000000, 0, 0, 0]),
        u256([10000000, 0, 0, 0]),
        u256([100000000, 0, 0, 0]),
        u256([1000000000, 0, 0, 0]),
        u256([10000000000, 0, 0, 0]),
        u256([100000000000, 0, 0, 0]),
        u256([1000000000000, 0, 0, 0]),
        u256([10000000000000, 0, 0, 0]),
        u256([100000000000000, 0, 0, 0]),
        u256([1000000000000000, 0, 0, 0]),
        u256([10000000000000000, 0, 0, 0]),
        u256([100000000000000000, 0, 0, 0]),
        u256([1000000000000000000, 0, 0, 0]),
        u256([10000000000000000000, 0, 0, 0]),
        u256([7766279631452241920, 5, 0, 0]),
        u256([3875820019684212736, 54, 0, 0]),
        u256([1864712049423024128, 542, 0, 0]),
        u256([200376420520689664, 5421, 0, 0]),
        u256([2003764205206896640, 54210, 0, 0]),
        u256([1590897978359414784, 542101, 0, 0]),
        u256([15908979783594147840, 5421010, 0, 0]),
        u256([11515845246265065472, 54210108, 0, 0]),
        u256([4477988020393345024, 542101086, 0, 0]),
        u256([7886392056514347008, 5421010862, 0, 0]),
        u256([5076944270305263616, 54210108624, 0, 0]),
        u256([13875954555633532928, 542101086242, 0, 0]),
        u256([9632337040368467968, 5421010862427, 0, 0]),
        u256([4089650035136921600, 54210108624275, 0, 0]),
        u256([4003012203950112768, 542101086242752, 0, 0]),
        u256([3136633892082024448, 5421010862427522, 0, 0]),
        u256([12919594847110692864, 54210108624275221, 0, 0]),
        u256([68739955140067328, 542101086242752217, 0, 0]),
        u256([687399551400673280, 5421010862427522170, 0, 0]),
        u256([6873995514006732800, 17316620476856118468, 2, 0]),
        u256([13399722918938673152, 7145508105175220139, 29, 0]),
        u256([4870020673419870208, 16114848830623546549, 293, 0]),
        u256([11806718586779598848, 13574535716559052564, 2938, 0]),
        u256([7386721425538678784, 6618148649623664334, 29387, 0]),
        u256([80237960548581376, 10841254275107988496, 293873, 0]),
        u256([802379605485813760, 16178822382532126880, 2938735, 0]),
        u256([8023796054858137600, 14214271235644855872, 29387358, 0]),
        u256([6450984253743169536, 13015503840481697412, 293873587, 0]),
        u256([9169610316303040512, 1027829888850112811, 2938735877, 0]),
        u256([17909126868192198656, 10278298888501128114, 29387358770, 0]),
        u256([13070572018536022016, 10549268516463523069, 293873587705, 0]),
        u256([1578511669393358848, 13258964796087472617, 2938735877055, 0]),
        u256([15785116693933588480, 3462439444907864858, 29387358770557, 0]),
        u256([
            10277214349659471872,
            16177650375369096972,
            293873587705571,
            0,
        ]),
        u256([
            10538423128046960640,
            14202551164014556797,
            2938735877055718,
            0,
        ]),
        u256([
            13150510911921848320,
            12898303124178706663,
            29387358770557187,
            0,
        ]),
        u256([
            2377900603251621888,
            18302566799529756941,
            293873587705571876,
            0,
        ]),
        u256([
            5332261958806667264,
            17004971331911604867,
            2938735877055718769,
            0,
        ]),
        u256([
            16429131440647569408,
            4029016655730084128,
            10940614696847636083,
            1,
        ]),
        u256([
            16717361816799281152,
            3396678409881738056,
            17172426599928602752,
            15,
        ]),
        u256([
            1152921504606846976,
            15520040025107828953,
            5703569335900062977,
            159,
        ]),
        u256([
            11529215046068469760,
            7626447661401876602,
            1695461137871974930,
            1593,
        ]),
        u256([
            4611686018427387904,
            2477500319180559562,
            16954611378719749304,
            15930,
        ]),
        u256([
            9223372036854775808,
            6328259118096044006,
            3525417123811528497,
            159309,
        ]),
        u256([0, 7942358959831785217, 16807427164405733357, 1593091]),
        u256([0, 5636613303479645706, 2053574980671369030, 15930919]),
        u256([0, 1025900813667802212, 2089005733004138687, 159309191]),
        u256([0, 10259008136678022120, 2443313256331835254, 1593091911]),
        u256([0, 10356360998232463120, 5986388489608800929, 15930919111]),
        u256([0, 11329889613776873120, 4523652674959354447, 159309191113]),
        u256([0, 2618431695511421504, 8343038602174441244, 1593091911132]),
        u256([0, 7737572881404663424, 9643409726906205977, 15930919111324]),
        u256([0, 3588752519208427776, 4200376900514301694, 159309191113245]),
        u256([
            0,
            17440781118374726144,
            5110280857723913709,
            1593091911132452,
        ]),
        u256([
            0,
            8387114520361296896,
            14209320429820033867,
            15930919111324522,
        ]),
        u256([
            0,
            10084168908774762496,
            12965995782233477362,
            159309191113245227,
        ]),
        u256([
            0,
            8607968719199866880,
            532749306367912313,
            1593091911132452277,
        ]),
    ];
}

impl BasicInt for primitive_types::U256 {
    const TEN: Self = u256([10, 0, 0, 0]);
    fn leading_zeros(self) -> u32 {
        let mut zeros = self.0[3].leading_zeros();
        if zeros == 64 {
            zeros += self.0[2].leading_zeros();
        }
        if zeros == 128 {
            zeros += self.0[1].leading_zeros();
        }
        if zeros == 192 {
            zeros += self.0[0].leading_zeros();
        }
        zeros
    }
}
